/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TestDynProxyMock.java
 *
 * Created on Jun 30, 2009, 9:07:54 AM
 */
package tests.DynProxy.WrapperDynamic;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

/**
 *
 * @author GBH
 */
public class TestDynProxyMock extends javax.swing.JFrame {

  /** Creates new form TestDynProxyMock */
  public TestDynProxyMock() {
    InvocationHandler handler = new MyInvocationHandler();
    MyInterface proxy = (MyInterface) Proxy.newProxyInstance(MyInterface.class.getClassLoader(),
            new Class[]{MyInterface.class},
            handler);
   proxy.doit();
    proxy.getIt();
    proxy.isIt();
    proxy.add(5);
    proxy.add(2.1);
    initComponents();
  }

  public class MyInvocationHandler implements InvocationHandler {

    public Object invoke(Object proxy, Method method, Object[] args)
            throws Throwable {
      //do something "dynamic"
      System.out.print(method.getName()+"(");
      if(args!=null) {
        System.out.print(args.toString());
      }
      System.out.print(") ");
		if (char.class.isAssignableFrom(method.getReturnType())) {
          System.out.println(" > char ");
          return 'c';
        }
		if (int.class.isAssignableFrom(method.getReturnType())) {
          System.out.println(" > int ");
          return 1;
        }
		if (float.class.isAssignableFrom(method.getReturnType())) {
          System.out.println(" > float ");
          return 2.1;
        }
		if (double.class.isAssignableFrom(method.getReturnType())) {
          System.out.println(" > double ");
          return 2.1;
        }
		if (boolean.class.isAssignableFrom(method.getReturnType())){
          System.out.println(" > boolean ");
          return true;
        }
		if (String.class.isAssignableFrom(method.getReturnType())){
          System.out.println(" > string ");
          return "A String";
        }
      System.out.println("> " + method.getReturnType());
      return null;
    }
  }

  interface MyInterface {
    void doit();
    int getIt();
    boolean isIt();
    void add(int n);
    void add(double n);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setName("Form"); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new TestDynProxyMock().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}

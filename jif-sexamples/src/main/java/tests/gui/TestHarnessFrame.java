/*
 * TestHarnessFrame.java
 *
 * Created on October 13, 2006, 3:22 PM
 */

package tests.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;

/**
 * - Catches UncaughtExceptions
 * - Uses CheckThreadViolationRepaintManager
 *
 * @author  GBH
 */
public class TestHarnessFrame extends javax.swing.JFrame implements Thread.UncaughtExceptionHandler {
    
    // Exception that has been thrown. This is used to track if an exception
    // is thrown while alerting the user to the current exception.
    private Throwable throwable = null;
    
    /** Creates new form TestHarnessFrame */
    public TestHarnessFrame(Component comp) {
        this.add(comp, BorderLayout.CENTER);
        initComponents();
        //RepaintManager.setCurrentManager(new CheckThreadViolationRepaintManager());
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestHarnessFrame(new JPanel()).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * Invoked when an uncaught exception is encountered.  This invokes
     * the method of the same name with the calling thread as an argument.
     *
     * @param throwable the thrown exception
     */
    public void uncaughtException(Throwable throwable) {
        uncaughtException(Thread.currentThread(), throwable);
    }
    
    
    /**
     * Invoked when an uncaught exception is encountered.  This will
     * show a modal dialog alerting the user, and exit the app. This does
     * <b>not</b> invoke <code>exit</code>.
     *
     * @param thread the thread the exception was thrown on
     * @param throwable the thrown exception
     * @see #getUncaughtExceptionDialog
     */
    public void uncaughtException(Thread thread, final Throwable throwable) {
        synchronized (this) {
            if (this.throwable != null) {
                // An exception has occured while we're trying to display
                // the current exception, bale.
                System.err.println("exception thrown while altering user");
                throwable.printStackTrace();
                System.exit(1);
            } else {
                this.throwable = throwable;
            }
        }
        throwable.printStackTrace();
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(new Handler());
        } else {
            uncaughtException0();
        }
    }
    
    
    /**
     * Returns the dialog that is shown when an uncaught exception is
     * encountered.
     *
     * @see #uncaughtException
     * @return dialog to show when an uncaught exception is encountered
     */
    protected JDialog getUncaughtExceptionDialog() {
        // PENDING: this needs to be localized.
        JOptionPane optionPane =
                new JOptionPane(
                "An unrecoverable error has occured. " + getName()
                + " will now exit",
                JOptionPane.ERROR_MESSAGE);
        
        return optionPane.createDialog(null, "Error");
    }
    
    
    private void uncaughtException0() {
        Throwable throwable;
        synchronized (this) {
            throwable = this.throwable;
        }
        JDialog dialog = getUncaughtExceptionDialog();
        dialog.setVisible(true);
        System.exit(1);
    }
    
    // Coalesced Runnable implementation to avoid numerous inner classes.
    private class Handler implements Runnable {
        Handler() {}
        public void run() {
            uncaughtException0();
            
        }
    }
}


package edu.mbl.jif.comm.serterm;

/*
 * SerialGUI.java
 *
 * Created on November 5, 2007, 3:45 PM
 *
 * @author  Goldscott
 */

//import java.io.FileDescriptor;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
//import gnu.io.*;
import java.util.Enumeration;
import java.util.TooManyListenersException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.comm.CommPort;
import javax.comm.CommPortIdentifier;
import javax.comm.SerialPort;
import javax.comm.SerialPortEvent;
import javax.comm.SerialPortEventListener;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
//import javax.swing.JOptionPane;

public class SerTermGUI extends javax.swing.JFrame {

  static SimpleAttributeSet BLUE = new SimpleAttributeSet();
  static SimpleAttributeSet BOLD_BLACK = new SimpleAttributeSet();
  static SimpleAttributeSet GRAY = new SimpleAttributeSet();
  static SimpleAttributeSet RED = new SimpleAttributeSet();


  static {
    StyleConstants.setForeground(BLUE, Color.blue);
    StyleConstants.setItalic(BLUE, true);
    StyleConstants.setFontFamily(BLUE, "Monospaced");
    StyleConstants.setFontSize(BLUE, 12);

    StyleConstants.setForeground(BOLD_BLACK, Color.black);
    StyleConstants.setBold(BOLD_BLACK, true);
    StyleConstants.setFontFamily(BOLD_BLACK, "Monospaced");
    StyleConstants.setFontSize(BOLD_BLACK, 12);

    StyleConstants.setForeground(GRAY, Color.gray);
    StyleConstants.setFontFamily(GRAY, "Monospaced");
    StyleConstants.setFontSize(GRAY, 12);

    StyleConstants.setForeground(RED, Color.red);
    StyleConstants.setFontFamily(RED, "Monospaced");
    StyleConstants.setFontSize(RED, 12);
  }

  /** Creates new form SerialGUI */
  public SerTermGUI() {
    try {
      UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
      JPopupMenu.setDefaultLightWeightPopupEnabled(false);
      ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
    } catch (ClassNotFoundException ex) {
      Logger.getLogger(SerTermGUI.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      Logger.getLogger(SerTermGUI.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      Logger.getLogger(SerTermGUI.class.getName()).log(Level.SEVERE, null, ex);
    } catch (UnsupportedLookAndFeelException ex) {
      Logger.getLogger(SerTermGUI.class.getName()).log(Level.SEVERE, null, ex);
    }
    getPorts();
    initComponents();

    displayFormat = RxFormat.ASCII;
    this.plainAscii.setSelected(true);
    sendCR = true;
    sendLF = false;
    this.checkBoxCR.setSelected(sendCR);
    this.checkBoxLF.setSelected(sendLF);
    //Display some instructions upon opening
    append(">>Select Port, Specify Baud Rate (default 9600), Open Port.\n", GRAY);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jOptionPane1 = new javax.swing.JOptionPane();
    rxformat = new javax.swing.ButtonGroup();
    jPanel1 = new javax.swing.JPanel();
    portToggle = new javax.swing.JToggleButton();
    portBox = new javax.swing.JComboBox();
    buttonSetParameters = new javax.swing.JButton();
    panelSerialConfig1 = new edu.mbl.jif.comm.PanelSerialConfig();
    jPanel3 = new javax.swing.JPanel();
    textbar = new javax.swing.JTextField();
    SendButton = new javax.swing.JButton();
    clearButton = new javax.swing.JButton();
    jPanel4 = new javax.swing.JPanel();
    checkBoxLF = new javax.swing.JCheckBox();
    jPanel2 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    plainAscii = new javax.swing.JRadioButton();
    int16 = new javax.swing.JRadioButton();
    displayHex = new javax.swing.JRadioButton();
    checkBoxCR = new javax.swing.JCheckBox();
    jLabel3 = new javax.swing.JLabel();
    buttonAsciiChart = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    textWin = new javax.swing.JTextPane();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Serial Port Tester");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });
    getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

    jPanel1.setMaximumSize(new java.awt.Dimension(32767, 160));
    jPanel1.setPreferredSize(new java.awt.Dimension(250, 160));

    portToggle.setText("Open Port");
    portToggle.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        portToggleActionPerformed(evt);
      }
    });

    portBox.setModel(new javax.swing.DefaultComboBoxModel(portList));
    portBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        portBoxActionPerformed(evt);
      }
    });

    buttonSetParameters.setText("Set Parameters");
    buttonSetParameters.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonSetParametersActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel1Layout.createSequentialGroup()
            .add(portBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(portToggle))
          .add(buttonSetParameters)
          .add(panelSerialConfig1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 332, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(144, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(portBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(portToggle))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(panelSerialConfig1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(buttonSetParameters)
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    getContentPane().add(jPanel1);

    jPanel3.setMaximumSize(new java.awt.Dimension(32767, 100));
    jPanel3.setPreferredSize(new java.awt.Dimension(250, 100));

    textbar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        textbarActionPerformed(evt);
      }
    });

    SendButton.setText("Send");
    SendButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SendButtonActionPerformed(evt);
      }
    });

    clearButton.setText("Clear");
    clearButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearButtonActionPerformed(evt);
      }
    });

    checkBoxLF.setText("LF");
    checkBoxLF.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        checkBoxLFItemStateChanged(evt);
      }
    });

    jPanel2.setPreferredSize(new java.awt.Dimension(200, 28));
    jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

    jLabel1.setText("Receive Format");
    jPanel2.add(jLabel1);

    jLabel2.setText("   ");
    jPanel2.add(jLabel2);

    rxformat.add(plainAscii);
    plainAscii.setSelected(true);
    plainAscii.setText("ASCII");
    plainAscii.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        plainAsciiActionPerformed(evt);
      }
    });
    jPanel2.add(plainAscii);

    rxformat.add(int16);
    int16.setText("int16");
    int16.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        int16ActionPerformed(evt);
      }
    });
    jPanel2.add(int16);

    rxformat.add(displayHex);
    displayHex.setText("hex");
    displayHex.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        displayHexActionPerformed(evt);
      }
    });
    jPanel2.add(displayHex);

    checkBoxCR.setText("CR");
    checkBoxCR.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        checkBoxCRItemStateChanged(evt);
      }
    });

    jLabel3.setText("terminate with:");

    buttonAsciiChart.setText("ASCII Chart");
    buttonAsciiChart.setMargin(new java.awt.Insets(2, 4, 2, 4));
    buttonAsciiChart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonAsciiChartActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel4Layout.createSequentialGroup()
            .add(jLabel3)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(checkBoxCR)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(checkBoxLF)
            .add(37, 37, 37)
            .add(buttonAsciiChart))
          .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 279, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(56, Short.MAX_VALUE))
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel4Layout.createSequentialGroup()
        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(checkBoxCR)
          .add(jLabel3)
          .add(checkBoxLF)
          .add(buttonAsciiChart))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel3Layout.createSequentialGroup()
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .add(textbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(SendButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(clearButton)))
        .addContainerGap(141, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(textbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(SendButton)
          .add(clearButton))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
        .addContainerGap())
    );

    getContentPane().add(jPanel3);

    textWin.setMaximumSize(new java.awt.Dimension(360, 500));
    textWin.setMinimumSize(new java.awt.Dimension(360, 300));
    textWin.setPreferredSize(new java.awt.Dimension(360, 300));
    jScrollPane2.setViewportView(textWin);

    getContentPane().add(jScrollPane2);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
      //Send button is the same action as hitting Enter on the textbar
      textbarActionPerformed(evt);
    }//GEN-LAST:event_SendButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
      //remove all text from the window
      textWin.setText("");
}//GEN-LAST:event_clearButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      //when user closes, make sure to close open ports and open I/O streams
      if (portIdentifier.isCurrentlyOwned()) { //if port open, close port
        portToggle.setText("Open Port");
        if (inputStream != null) //close input stream
        {
          try {
            inputStream.close();
          } catch (IOException ex) {
            ex.printStackTrace();
          }
        }
        if (outputStream != null) //close output stream
        {
          try {
            outputStream.close();
          } catch (IOException ex) {
            ex.printStackTrace();
          }
        }
        serialPort.removeEventListener();
        if (serialPort != null) {
          serialPort.close();
        }
        open = false;
        append(">>Port " + portName + " is now closed.\n", GRAY);
      }
    }//GEN-LAST:event_formWindowClosing

    private void buttonSetParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetParametersActionPerformed
      //only change baud when port is closed
//      boolean reopen = false;
//      if (portIdentifier.isCurrentlyOwned()) {//if port open, prompt user to close
//        append(">>Closing Port " + portName + ".\n", GRAY);
//        reopen = true;
//      //JOptionPane.showMessageDialog(this, "Must Close Port First.", "Error", JOptionPane.ERROR_MESSAGE);
//      }
//      String newbaud = baudField.getText();//get text from user
//      //do simple check to make sure baudrate is valid
//      if (newbaud.equals("")) {
//        append(">>Must Enter Valid Baud Rate\n", RED);
//      //JOptionPane.showMessageDialog(this, "Must Enter Valid Baud Rate.");
//      } else {//convert string to int. when user re-opens port, it will be new baudrate
//        baudRate = Integer.valueOf(newbaud).intValue();
//        append(">>Baud rate changed to " + baudRate + "\n", GRAY);
//        if (reopen == true) {
//          try {
//            connect(portName);
//          } catch (Exception e) {
//            e.printStackTrace();
//          }
//          append(">>Opening Port: " + portName + ", Baud Rate: " + baudRate + "\n", GRAY);
//        }
//      }
}//GEN-LAST:event_buttonSetParametersActionPerformed

    private void portToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portToggleActionPerformed
      Runnable runnable = new Runnable() {

        public void run() {
          //only open valid port. portList[0]="select port" - not a valid port
          //if ((String)portBox.getSelectedItem() == portList[0]) {
          if (portBox.getSelectedItem().equals(portList[0])) {
            append(">>Must Select Valid Port.\n", RED);
            portToggle.setSelected(open);
            //JOptionPane.showMessageDialog(this, "Must Select Valid Port.", "Error", JOptionPane.ERROR_MESSAGE);
          } //if port open, close port & I/O streams
          else if (portIdentifier.isCurrentlyOwned()) {
            portToggle.setText("Open Port");
            //close input stream
            if (inputStream != null) {
              try {
                inputStream.close();
              } catch (IOException ex) {
                ex.printStackTrace();
              }
            }
            //close output stream
            if (outputStream != null) {
              try {
                outputStream.close();
              } catch (IOException ex) {
                ex.printStackTrace();
              }
            }
            //close serial port
            System.out.println("closing serial port.");
            serialPort.removeEventListener();
            if (serialPort != null) {
              serialPort.close();
            }
            System.out.println("closed serial port.");

            open = false;
            append(">>Port " + portName + " is now closed.\n", GRAY);
          } else {//else port is closed, so open it
            portToggle.setText("Close Port");
            portName = (String) portBox.getSelectedItem();
            append(">>Opening Port: " + portName + ", Baud Rate: " + baudRate + "\n", GRAY);
            try {
              connect(portName);
            } catch (Exception e) {
              e.printStackTrace();
            }
            try {
              serialPort.addEventListener(new EventListener());
            } catch (TooManyListenersException ex) {
              ex.printStackTrace();
            }
            serialPort.notifyOnDataAvailable(true);
            append(">>Port opened.\n", GRAY);
          }
        }
      };
      runnable.run();
      System.out.println("end of toggle function");
    }//GEN-LAST:event_portToggleActionPerformed

  //open serial port
  void connect(String portName) throws Exception {
    //make sure port is not currently in use
    portIdentifier = CommPortIdentifier.getPortIdentifier(portName);
    if (portIdentifier.isCurrentlyOwned()) {
      System.out.println("Error: Port is currently in use");
    } else {
      //create CommPort and identify available serial/parallel ports
      commPort = portIdentifier.open(this.getClass().getName(), 2000);
      serialPort = (SerialPort) commPort;//cast all to serial
      //set baudrate, 8N1 stopbits, no parity
    //  serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
      //start I/O streams
      inputStream = serialPort.getInputStream();
      outputStream = serialPort.getOutputStream();
      open = true;

    }
  }

    private void portBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portBoxActionPerformed
      if (open == true) { //if port open, make user close port before changing port
        append("Must Close Port Before Changing Port.\n", RED);
      //JOptionPane.showMessageDialog(this, "Must Close Port Before Changing Port.");
      } else {
        portName = (String) portBox.getSelectedItem();
        append(">>Port Selected: " + portName + ", Baud Rate: " + baudRate + "\n", GRAY);
      }
    }//GEN-LAST:event_portBoxActionPerformed

    private void textbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textbarActionPerformed
      Runnable runnable = new Runnable() {

        public void run() {
          String text = textbar.getText();    //get text from field
          append(">>" + text + "\n", BOLD_BLACK);   //write text to terminal followed by new line
          textbar.selectAll();                //highlight text so it can be easily overwritten
          //if serial port open, write to serial port
          if (open == true) {
            //if (!text.equals("+++") ) { //&& displayFormat == RxFormat.ASCII) {
            if (sendCR) {
              text = text + "\r";
            }
            if (sendLF) {
              text = text + "\n";
            }
            //text = text + "\r"; //append carriage return to text (except for +++ for XBee)
            //}
            try {
              outputStream.write(text.getBytes()); //write to serial port
              outputStream.flush();
            } catch (IOException ex) {
              ex.printStackTrace();
            }
          }
        }
      };
      runnable.run();
    }//GEN-LAST:event_textbarActionPerformed

    private void plainAsciiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plainAsciiActionPerformed
      if (plainAscii.isSelected()) {
        displayFormat = RxFormat.ASCII;
      }

}//GEN-LAST:event_plainAsciiActionPerformed

    private void int16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_int16ActionPerformed
      if (int16.isSelected()) {
        displayFormat = RxFormat.INT16;
      }
    }//GEN-LAST:event_int16ActionPerformed

    private void displayHexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHexActionPerformed
      if (displayHex.isSelected()) {
        displayFormat = RxFormat.HEX;
      }
}//GEN-LAST:event_displayHexActionPerformed

    private void checkBoxLFItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxLFItemStateChanged
      sendLF = checkBoxLF.isSelected();
    }//GEN-LAST:event_checkBoxLFItemStateChanged

    private void checkBoxCRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCRItemStateChanged
      sendCR = checkBoxCR.isSelected();
    }//GEN-LAST:event_checkBoxCRItemStateChanged

    private void buttonAsciiChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAsciiChartActionPerformed
      // open acsii chart
      SwingUtilities.invokeLater(new Runnable() {

        public void run() {
          JFrame f = new JFrame("ASCII Chart");
          f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
          f.setSize(200, 480);
          JTextPane p = new JTextPane();
          String chart = "\n\n" +
                  "    0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n" +
                  "0  NUL SOH STX ETX EOT ENQ ACK BEL BS  HT  LF  VT  FF  CR  SO  SI\n" +
                  "1  DLE DC1 DC2 DC3 DC4 NAK SYN ETB CAN EM  SUB ESC FS  GS  RS  US\n" +
                  "2   SP  !   \"   #   $   %   &   '   (   )   *   +   ,   -   .   / \n" +
                  "3   0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ?\n" +
                  "4   @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O\n" +
                  "5   P   Q   R   S   T   U   V   W   X   Y   Z   [   \\   ]   ^   _\n" +
                  "6   `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o\n" +
                  "7   p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~ DEL\n\n";

          try {
            p.getDocument().insertString(
                    p.getDocument().getLength(), chart, GRAY);
          } catch (BadLocationException e) {
            e.printStackTrace();
          }
          setEndSelection();
          f.add(p);
          f.pack();
          f.setVisible(true);
        }
      });
    }//GEN-LAST:event_buttonAsciiChartActionPerformed
  /*
  private void listPorts() {
  //display available ports to the terminal
  Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();
  while ( portEnum.hasMoreElements() )
  {
  portIdentifier = (CommPortIdentifier) portEnum.nextElement();
  textWin.append(portIdentifier.getName() + "\n");
  }
  }
   */
  //run before initializing GUI
  //creates a string array of all the ports
  //to be displayed in dropdown box upon opening program

  private void getPorts() {
    Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();
    tempPortList = new String[MAX_PORTS]; //create array of 20 ports
    int numports = 0;
    int i;
    tempPortList[0] = "Select Port";
    //fill up a temporary list of length MAX_PORTS with the portnames
    while (portEnum.hasMoreElements()) {
      portIdentifier = (CommPortIdentifier) portEnum.nextElement();
      numports++;
      tempPortList[numports] = portIdentifier.getName();
    }
    //make the actual port list only as long as necessary
    portList = new String[numports];
    for (i = 0; i < numports; i++) {
      portList[i] = tempPortList[i];
    }
  }
class EventListener implements SerialPortEventListener {


  //serial event: when data is received from serial port
  //display the data on the terminal
  public void serialEvent(SerialPortEvent event) {
    switch (event.getEventType()) {
      case SerialPortEvent.DATA_AVAILABLE:
        byte[] buffer = new byte[MAX_DATA];   //create a buffer (enlarge if buffer overflow occurs)
        int numBytes = 0;   //how many bytes read (smaller than buffer)
        int int16value;
        System.out.println("displayFormat = " + displayFormat);
        switch (displayFormat) {
          case ASCII: {
            try {   //read the input stream and store to buffer, count number of bytes read
              while ((numBytes = inputStream.read(buffer)) > 0) {
                //convert to string of size numBytes
                String str = new String(buffer).substring(0, numBytes);
                str = str.replace('\r', '\n'); //replace CR with Newline
                append(str, BLUE);        //write to terminal
              }
            } catch (IOException ex) {
              ex.printStackTrace();
            }
            break;
          }
          case INT16: {
            readall(inputStream, buffer, 2); //put two bytes in buffer
            int16value = 256 * (int) buffer[1] + (int) buffer[0];
            append(int16value + "\n", BLUE);        //write to terminal
            break;
          }
          case HEX: {
            try {   //read the input stream and store to buffer, count number of bytes read
              while ((numBytes = inputStream.read(buffer)) > 0) {
                //convert to string of size numBytes
                readall(inputStream, buffer, numBytes); //put two bytes in buffer
                String hexStr = byteArrayToString(buffer, numBytes);
                append(hexStr + "\n", BLUE);        //write to terminal
              }
            } catch (IOException ex) {
              ex.printStackTrace();
            }
            break;
          }
        }
        //scroll terminal to bottom
        textWin.setCaretPosition(textWin.getText().length());
        break;
    }
  }
}
  protected void append(final String text, final AttributeSet set) {
    SwingUtilities.invokeLater(new Runnable() {

      public void run() {
        try {
          textWin.getDocument().insertString(
                  textWin.getDocument().getLength(), text, set);
        } catch (BadLocationException e) {
          e.printStackTrace();
        }
        setEndSelection();
      }
    });
  }

  protected void setEndSelection() {
    textWin.setSelectionStart(textWin.getDocument().getLength());
    textWin.setSelectionEnd(textWin.getDocument().getLength());
  }
  //fill buffer with numBytes bytes from is

  public void readall(InputStream is, byte[] buffer, int numBytes) {
    int tempRead = 0;
    while (tempRead < numBytes) {
      try {
        tempRead = tempRead + is.read(buffer, tempRead, numBytes - tempRead);
      } catch (IOException ex) {
        ex.printStackTrace();
      }
    }
    return;
  }


  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new SerTermGUI().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton SendButton;
  private javax.swing.JButton buttonAsciiChart;
  private javax.swing.JButton buttonSetParameters;
  private javax.swing.JCheckBox checkBoxCR;
  private javax.swing.JCheckBox checkBoxLF;
  private javax.swing.JButton clearButton;
  private javax.swing.JRadioButton displayHex;
  private javax.swing.JRadioButton int16;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JOptionPane jOptionPane1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JScrollPane jScrollPane2;
  private edu.mbl.jif.comm.PanelSerialConfig panelSerialConfig1;
  private javax.swing.JRadioButton plainAscii;
  private javax.swing.JComboBox portBox;
  private javax.swing.JToggleButton portToggle;
  private javax.swing.ButtonGroup rxformat;
  private javax.swing.JTextPane textWin;
  private javax.swing.JTextField textbar;
  // End of variables declaration//GEN-END:variables
  private String[] tempPortList,  portList; //list of ports for combobox dropdown
  private String portName;
  private CommPort commPort;
  private SerialPort serialPort;
  private CommPortIdentifier portIdentifier = null;
  private InputStream inputStream;
  private OutputStream outputStream;
  private int baudRate = 9600;
  private boolean open = false;
  private boolean sendCR = true;
  private boolean sendLF = false;

  public enum RxFormat {

    ASCII, INT16, HEX;
  }
  private static RxFormat displayFormat;

  //constants
  static final int MAX_PORTS = 20;    //maximum number of ports to look for
  static final int MAX_DATA = 64;//maximum length of serial data received

  /**
   * converts a byte array into a String in hexidecimal form.
   *
   * @param b byte[] to turn to a String
   *
   * @return String of bytes in hexadecimal format
   */
  static public String byteArrayToString(byte[] b, int len) {
    if (b == null) {
      return null;
    }

    StringBuffer ret = new StringBuffer();
    int sz = b.length;

    for (int i = 0; i < len; i++) {
      ret.append("x" + byteToString(b[i]) + " ");
    }

    return ret.toString();
  }

  /**
   * given a byte, return a String like:  "09" or "AA" etc..
   *
   * @param b byte to turn to a String
   *
   * @return String of byte in hexadecimal format
   */
  static public String byteToString(byte b) {
    int i = (int) b;
    if (i < 0) {
      i += 256;
    }
    String tmp = Integer.toHexString(i);
    if (tmp.length() == 1) {
      tmp = "0" + tmp;
    }
    return tmp;
  }
}

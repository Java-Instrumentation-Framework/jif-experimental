/*
 * DataDirSelect.java
 *
 * Created on June 20, 2006, 10:43 AM
 */
package edu.mbl.jif.data;

import com.jgoodies.binding.value.ValueModel;
import com.l2fprod.common.swing.JDirectoryChooser;
import edu.mbl.jif.utils.StaticSwingUtils;
import java.awt.Component;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;

/**
 * Generalized Directory Picker using ValueModel
 * @author  GBH
 */
public class DataDirSelect
        extends javax.swing.JPanel {

    ValueModel valueModel;
    String msg;
    Component parent;


    public DataDirSelect() {
        initComponents();
    }


    /** Creates new form DataDirSelect */
    public DataDirSelect(ValueModel valueModel, final Component parent) {
        this(valueModel, parent, "Select data folder");
    }


    public DataDirSelect(ValueModel valueModel, final Component parent,
                          String msg) {
        this.msg = msg;
        this.valueModel = valueModel;
        this.parent = parent;
        initComponents();
        fieldDir.setText((String) valueModel.getValue());
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldDir = new javax.swing.JFormattedTextField();
        buttonChangeDir = new javax.swing.JButton();

        setOpaque(false);
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel1.setText(" Path:  ");
        add(jLabel1);

        fieldDir.setEditable(false);
        fieldDir.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldDir.setMaximumSize(null);
        add(fieldDir);

        buttonChangeDir.setFont(new java.awt.Font("SansSerif", 0, 10));
        buttonChangeDir.setText("...");
        buttonChangeDir.setToolTipText("Select data path/folder");
        buttonChangeDir.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonChangeDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirChooser(evt);
            }
        });
        add(buttonChangeDir);
    }// </editor-fold>//GEN-END:initComponents
    
   private void openDirChooser(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirChooser
       StaticSwingUtils.dispatchToEDT(new Runnable() {
           public void run() {
               String dataPath = selectDirectory(null, 
                   (String) valueModel.getValue(), msg, null);  // no confirmation
               if (dataPath != null) {
                   valueModel.setValue(dataPath);
                   fieldDir.setText(dataPath);
               }
           }
       });
   }//GEN-LAST:event_openDirChooser
   // Using l2prod...
   
   public static String selectDirectory(Component parent, String selectedFile,
           String message, String confirmMsg) {
       JDirectoryChooser chooser = new JDirectoryChooser();
       File currentDir = new File(selectedFile);
       if (selectedFile != null) {
           chooser.setSelectedFile(currentDir);
       }
       
       JTextArea accessory = new JTextArea(message);
       accessory.setLineWrap(true);
       accessory.setWrapStyleWord(true);
       accessory.setEditable(false);
       accessory.setOpaque(false);
       accessory.setFont(UIManager.getFont("Tree.font"));
       chooser.setAccessory(accessory);
       chooser.setMultiSelectionEnabled(false); // <<<<<<<<
       chooser.ensureFileIsVisible(currentDir);
       int choice = chooser.showOpenDialog(parent);
       if (choice == JDirectoryChooser.APPROVE_OPTION) {
           String filenames = "";
           File[] selectedFiles = chooser.getSelectedFiles();
           for (int i = 0, c = selectedFiles.length; i < c; i++) {
               filenames += selectedFiles[i];
           }
           if(confirmMsg!=null) {
               JOptionPane.showMessageDialog(parent, confirmMsg + filenames);
           }
           return filenames;
       } else {
           if(confirmMsg!=null) {
               JOptionPane.showMessageDialog(parent, "Cancelled");
           }
           return null;
       }
   }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChangeDir;
    private javax.swing.JFormattedTextField fieldDir;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
}

/*
 * PanelDiagnostics.java
 *
 * GBH, Sept 2008
 */
package edu.mbl.jif.config;

import edu.mbl.jif.a_jar_stdio_terminal.StdioTerm;
import edu.mbl.jif.camacq.CamAcqJ;
import edu.mbl.jif.utils.prefs.Prefs;
//import edu.mbl.jif.script.BeanShellConsole;
import java.util.prefs.Preferences;
import javax.swing.SwingUtilities;
import org.bbg.prefs.PrefsEditor;

/**
 * System options and diagnostics panel
 * @author  GBH
 */
public class PanelDiagnostics extends javax.swing.JPanel {

  Preferences prefs;
  //   AbstractApplicationController appCtrl;

  /** Creates new form PanelSys */
  public PanelDiagnostics() {
    prefs = //CamAcqJ.getInstance().getPreferences();
            Preferences.userRoot().node("/edu/mbl/jif/camacq");
    //Preferences.systemRoot());
    initComponents();
    checkDebug.setSelected(prefs.getBoolean("deBug", false));
    checkBoxLog.setSelected(prefs.getBoolean("logOutErr", false));
    checkEDT.setSelected(prefs.getBoolean("checkEDT", false));
    checkEDT.setSelected(prefs.getBoolean("checkRepaint", false));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jTabbedPane1 = new javax.swing.JTabbedPane();
      panelPrefs = new javax.swing.JPanel();
      buttonProperties = new javax.swing.JButton();
      buttonPrefsEditor = new javax.swing.JButton();
      buttonPrefs = new javax.swing.JButton();
      buttonLoadPrefs = new javax.swing.JButton();
      buttonSavePrefs = new javax.swing.JButton();
      panelDevices = new javax.swing.JPanel();
      buttonSerialPorts = new javax.swing.JButton();
      buttonDeviceMgr = new javax.swing.JButton();
      buttonSysInfo = new javax.swing.JButton();
      buttonUSB = new javax.swing.JButton();
      buttonTestSerial = new javax.swing.JButton();
      panelDebug = new javax.swing.JPanel();
      jPanel1 = new javax.swing.JPanel();
      checkBoxLog = new javax.swing.JCheckBox();
      buttonViewLog = new javax.swing.JButton();
      buttonConsole = new javax.swing.JButton();
      buttonBeanShell = new javax.swing.JButton();
      jPanel2 = new javax.swing.JPanel();
      checkDebug = new javax.swing.JCheckBox();
      checkRepaint = new javax.swing.JCheckBox();
      checkEDT = new javax.swing.JCheckBox();
      panelMem = new javax.swing.JPanel();
      buttonMemory = new javax.swing.JButton();
      buttonPrefs1 = new javax.swing.JButton();
      buttonPermissions = new javax.swing.JButton();
      buttonInspector = new javax.swing.JButton();

      setBackground(edu.mbl.jif.utils.color.JifColor.purple[2]);
      setLayout(new java.awt.BorderLayout());

      buttonProperties.setBackground(new java.awt.Color(230, 187, 187));
      buttonProperties.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonProperties.setText("Properties");
      buttonProperties.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonProperties.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            listProperties(evt);
         }
      });
      panelPrefs.add(buttonProperties);

      buttonPrefsEditor.setBackground(new java.awt.Color(230, 187, 187));
      buttonPrefsEditor.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonPrefsEditor.setText("PrefsEditor");
      buttonPrefsEditor.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonPrefsEditor.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonPrefsEditorActionPerformed(evt);
         }
      });
      panelPrefs.add(buttonPrefsEditor);

      buttonPrefs.setBackground(new java.awt.Color(255, 255, 204));
      buttonPrefs.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonPrefs.setText("Preferences");
      buttonPrefs.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonPrefs.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            openPrefEdit(evt);
         }
      });
      panelPrefs.add(buttonPrefs);

      buttonLoadPrefs.setBackground(new java.awt.Color(255, 255, 204));
      buttonLoadPrefs.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonLoadPrefs.setText("Load");
      buttonLoadPrefs.setToolTipText("Load preference values from a file");
      buttonLoadPrefs.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonLoadPrefs.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonLoadPrefsActionPerformed(evt);
         }
      });
      panelPrefs.add(buttonLoadPrefs);

      buttonSavePrefs.setBackground(new java.awt.Color(255, 255, 204));
      buttonSavePrefs.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonSavePrefs.setText("Save");
      buttonSavePrefs.setToolTipText("Save preference values to a file");
      buttonSavePrefs.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonSavePrefs.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonSavePrefsActionPerformed(evt);
         }
      });
      panelPrefs.add(buttonSavePrefs);

      jTabbedPane1.addTab("Preferences", panelPrefs);

      buttonSerialPorts.setBackground(new java.awt.Color(204, 204, 255));
      buttonSerialPorts.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      buttonSerialPorts.setText("SerialPorts");
      buttonSerialPorts.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonSerialPorts.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonSerialPortsActionPerformed(evt);
         }
      });
      panelDevices.add(buttonSerialPorts);

      buttonDeviceMgr.setBackground(new java.awt.Color(204, 204, 255));
      buttonDeviceMgr.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonDeviceMgr.setText("DeviceMgr");
      buttonDeviceMgr.setToolTipText("Launch Device Manager");
      buttonDeviceMgr.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonDeviceMgr.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonDeviceMgrActionPerformed(evt);
         }
      });
      panelDevices.add(buttonDeviceMgr);

      buttonSysInfo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      buttonSysInfo.setText("SystemInfo");
      buttonSysInfo.setToolTipText("Launch MS System Info");
      buttonSysInfo.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonSysInfo.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonSysInfoActionPerformed(evt);
         }
      });
      panelDevices.add(buttonSysInfo);

      buttonUSB.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      buttonUSB.setText("USB Devices");
      buttonUSB.setToolTipText("USB Device Viewer");
      buttonUSB.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonUSB.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonUSBActionPerformed(evt);
         }
      });
      panelDevices.add(buttonUSB);

      buttonTestSerial.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      buttonTestSerial.setText("SerialTest");
      buttonTestSerial.setToolTipText("Serial Port Tester");
      buttonTestSerial.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonTestSerial.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonTestSerialActionPerformed(evt);
         }
      });
      panelDevices.add(buttonTestSerial);

      jTabbedPane1.addTab("Devices", panelDevices);

      panelDebug.setLayout(new javax.swing.BoxLayout(panelDebug, javax.swing.BoxLayout.Y_AXIS));

      checkBoxLog.setText("Log");
      checkBoxLog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      checkBoxLog.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            checkBoxLogItemStateChanged(evt);
         }
      });
      jPanel1.add(checkBoxLog);

      buttonViewLog.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
      buttonViewLog.setText("View Log");
      buttonViewLog.setToolTipText("USB Device Viewer");
      buttonViewLog.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonViewLog.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonViewLogActionPerformed(evt);
         }
      });
      jPanel1.add(buttonViewLog);

      buttonConsole.setBackground(new java.awt.Color(195, 222, 241));
      buttonConsole.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonConsole.setText("Console");
      buttonConsole.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonConsoleActionPerformed(evt);
         }
      });
      jPanel1.add(buttonConsole);

      buttonBeanShell.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonBeanShell.setText("BeanShell");
      buttonBeanShell.setToolTipText("Open BeanShell console");
      buttonBeanShell.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonBeanShell.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            openBeanShellConsole(evt);
         }
      });
      jPanel1.add(buttonBeanShell);

      panelDebug.add(jPanel1);

      checkDebug.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
      checkDebug.setText("Debug");
      checkDebug.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      checkDebug.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      checkDebug.setMargin(new java.awt.Insets(0, 0, 0, 0));
      checkDebug.setOpaque(false);
      checkDebug.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            setDebug(evt);
         }
      });
      jPanel2.add(checkDebug);

      checkRepaint.setText("Repaint Check");
      checkRepaint.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            checkRepaintItemStateChanged(evt);
         }
      });
      checkRepaint.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            checkRepaintActionPerformed(evt);
         }
      });
      jPanel2.add(checkRepaint);

      checkEDT.setText("EDT watchdog");
      checkEDT.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            checkEDTItemStateChanged(evt);
         }
      });
      jPanel2.add(checkEDT);

      panelDebug.add(jPanel2);

      jTabbedPane1.addTab("Log/Debug", panelDebug);

      buttonMemory.setBackground(new java.awt.Color(174, 184, 174));
      buttonMemory.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonMemory.setText("MemMonitor");
      buttonMemory.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonMemory.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            openMemMonitor(evt);
         }
      });
      panelMem.add(buttonMemory);

      buttonPrefs1.setBackground(new java.awt.Color(230, 187, 187));
      buttonPrefs1.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonPrefs1.setText("Threads");
      buttonPrefs1.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonPrefs1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ViewThreads(evt);
         }
      });
      panelMem.add(buttonPrefs1);

      buttonPermissions.setBackground(new java.awt.Color(230, 187, 187));
      buttonPermissions.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonPermissions.setText("Permissions");
      buttonPermissions.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonPermissions.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            listPermissions(evt);
         }
      });
      panelMem.add(buttonPermissions);

      buttonInspector.setBackground(new java.awt.Color(214, 184, 214));
      buttonInspector.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
      buttonInspector.setText("Inspector");
      buttonInspector.setMargin(new java.awt.Insets(2, 4, 2, 4));
      buttonInspector.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            buttonInspectorActionPerformed(evt);
         }
      });
      panelMem.add(buttonInspector);

      jTabbedPane1.addTab("Memory/Threads", panelMem);

      add(jTabbedPane1, java.awt.BorderLayout.CENTER);
   }// </editor-fold>//GEN-END:initComponents

    private void openBeanShellConsole(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBeanShellConsole
      // TODO new BeanShellConsole();
    }//GEN-LAST:event_openBeanShellConsole

    private void ViewThreads(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewThreads
      DiagnosticTools.viewThreads();
    }//GEN-LAST:event_ViewThreads

    private void setDebug(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setDebug
      CamAcqJ.getInstance().setDebug(checkDebug.isSelected());
      prefs.putBoolean("deBug", checkDebug.isSelected());

    }//GEN-LAST:event_setDebug

    private void listPermissions(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPermissions
      DiagnosticTools.showPermissions();
    }//GEN-LAST:event_listPermissions

    private void listProperties(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listProperties
      DiagnosticTools.showProperties();
    }//GEN-LAST:event_listProperties

    private void buttonLoadPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadPrefsActionPerformed
//        if (JOptionPane.showConfirmDialog(null, "Reset Preferences?") == JOptionPane.YES_OPTION) {
//            try {
//                prefs.clear();
//            } catch (BackingStoreException e) {
//                e.printStackTrace();
//            }
//            JOptionPane.showMessageDialog(null, "Restart application now.");
//        }
      Prefs.loadPrefsFile();
}//GEN-LAST:event_buttonLoadPrefsActionPerformed

    private void openPrefEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPrefEdit
      try {
        //new de.jppietsch.prefedit.PrefEdit().main(null);
        // TODO (new PrefEditWindow("/edu/mbl/jif/camacq")).setVisible(true);
      } catch (Exception ex) {
      }
    }//GEN-LAST:event_openPrefEdit

    private void openMemMonitor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMemMonitor
      SwingUtilities.invokeLater(new Runnable() {

        public void run() {
          MemoryMonitor.openInJFrame();
        }
      });
    }//GEN-LAST:event_openMemMonitor

private void buttonPrefsEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrefsEditorActionPerformed
  SwingUtilities.invokeLater(new Runnable() {

    public void run() {
      //(new PrefsEditor(CamAcqJ.getInstance().getPreferences(),
      //    CamAcqJ.getInstance().getSystemPreferences())).setVisible(true);
			// NOTE 
			// System preferences can't be set from Java without UAC off or UAC elevation.
			// http://mark.koli.ch/2009/12/uac-prompt-from-java-createprocess-error740-the-requested-operation-requires-elevation.html
      (new PrefsEditor(
              //Preferences.userRoot().node("/edu/mbl/jif/camacq"),null
              Preferences.userRoot().node("/"),null
              //Preferences.systemRoot().node("/edu/mbl/jif/camacq")
					)).setVisible(true);
    }
    // Uses Java Preferences Tool from http://javaprefs.googlepages.com/javaprefshelppage
    });
}//GEN-LAST:event_buttonPrefsEditorActionPerformed

private void buttonConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConsoleActionPerformed
  SwingUtilities.invokeLater(new Runnable() {

    public void run() {
      StdioTerm.attach("Console");
      //new ConsoleJava();
    }
  });

}//GEN-LAST:event_buttonConsoleActionPerformed

private void buttonInspectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInspectorActionPerformed
  org.pf.joi.Inspector.inspect(CamAcqJ.getInstance());
//new Inspector(new Object[]{CamAcqJ.getInstance()});
}//GEN-LAST:event_buttonInspectorActionPerformed

private void buttonSerialPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSerialPortsActionPerformed
  DiagnosticTools.showCommPortStatus();
}//GEN-LAST:event_buttonSerialPortsActionPerformed

private void buttonSysInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSysInfoActionPerformed
  DiagnosticTools.launchWindowsSystemInformation();
}//GEN-LAST:event_buttonSysInfoActionPerformed

private void buttonUSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUSBActionPerformed
  DiagnosticTools.launchDSBDeview();
}//GEN-LAST:event_buttonUSBActionPerformed

private void checkBoxLogItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxLogItemStateChanged
  prefs.putBoolean("logOutErr", checkBoxLog.isSelected());
}//GEN-LAST:event_checkBoxLogItemStateChanged

private void buttonSavePrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSavePrefsActionPerformed
  Prefs.savePrefsFile("/edu/mbl/jif/camera/camacq");
}//GEN-LAST:event_buttonSavePrefsActionPerformed

private void checkEDTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkEDTItemStateChanged
  prefs.putBoolean("checkEDT", checkEDT.isSelected());
}//GEN-LAST:event_checkEDTItemStateChanged

private void checkRepaintItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkRepaintItemStateChanged
  prefs.putBoolean("checkRepaint", checkRepaint.isSelected());

}//GEN-LAST:event_checkRepaintItemStateChanged

private void buttonTestSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTestSerialActionPerformed
  // TODO new edu.mbl.jif.comm.SerialPortTester();
}//GEN-LAST:event_buttonTestSerialActionPerformed

private void buttonViewLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewLogActionPerformed
   DiagnosticTools.showOutErrLog();
}//GEN-LAST:event_buttonViewLogActionPerformed

  private void checkRepaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRepaintActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_checkRepaintActionPerformed

  private void buttonDeviceMgrActionPerformed(java.awt.event.ActionEvent evt) {
    DiagnosticTools.launchWindowsDeviceManager();
  }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton buttonBeanShell;
   private javax.swing.JButton buttonConsole;
   private javax.swing.JButton buttonDeviceMgr;
   private javax.swing.JButton buttonInspector;
   private javax.swing.JButton buttonLoadPrefs;
   private javax.swing.JButton buttonMemory;
   private javax.swing.JButton buttonPermissions;
   private javax.swing.JButton buttonPrefs;
   private javax.swing.JButton buttonPrefs1;
   private javax.swing.JButton buttonPrefsEditor;
   private javax.swing.JButton buttonProperties;
   private javax.swing.JButton buttonSavePrefs;
   private javax.swing.JButton buttonSerialPorts;
   private javax.swing.JButton buttonSysInfo;
   private javax.swing.JButton buttonTestSerial;
   private javax.swing.JButton buttonUSB;
   private javax.swing.JButton buttonViewLog;
   private javax.swing.JCheckBox checkBoxLog;
   private javax.swing.JCheckBox checkDebug;
   private javax.swing.JCheckBox checkEDT;
   private javax.swing.JCheckBox checkRepaint;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JPanel panelDebug;
   private javax.swing.JPanel panelDevices;
   private javax.swing.JPanel panelMem;
   private javax.swing.JPanel panelPrefs;
   // End of variables declaration//GEN-END:variables

}

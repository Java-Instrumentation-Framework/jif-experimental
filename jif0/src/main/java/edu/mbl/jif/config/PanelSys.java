/*
 * PanelSys.java
 *
 * Created on June 1, 2006, 6:13 PM
 */
package edu.mbl.jif.config;

import edu.mbl.jif.camacq.CamAcqJ;

import edu.mbl.jif.camera.TextWindow;
import edu.mbl.jif.utils.props.PropsWassup;
import edu.mbl.jif.workframe.AbstractApplicationController;
import java.util.prefs.Preferences;

/**
 * System options and diagnostics panel
 *
 * @author GBH
 */
public class PanelSys extends javax.swing.JPanel {

   Preferences prefs;
   /**
    * Creates new form PanelSys
    */
   AbstractApplicationController appCtrl;

   /**
    * Creates new form PanelSys
    */
   public PanelSys() {
      initComponents();
   }

   public PanelSys(AbstractApplicationController appCtrl) {
      prefs = CamAcqJ.getInstance().getPreferences();
      initComponents();
      labelVersion.setText(CamAcqJ.getInstance().getName() + " (version "
              + CamAcqJ.getInstance().getVersion() + ")");
      checkAlwaysOnTop.setSelected(prefs.getBoolean("app.alwaysOnTop", false));
      checkAuditory.setSelected(prefs.getBoolean("app.auditoryFeedback", true));
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        checkAlwaysOnTop = new javax.swing.JCheckBox();
        checkAuditory = new javax.swing.JCheckBox();
        labelVersion = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setOpaque(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setOpaque(false);

        checkAlwaysOnTop.setText("Always on top");
        checkAlwaysOnTop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkAlwaysOnTop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkAlwaysOnTop.setOpaque(false);
        checkAlwaysOnTop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                setAlwaysOnTop(evt);
            }
        });

        checkAuditory.setText("Auditory feedback");
        checkAuditory.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkAuditory.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkAuditory.setOpaque(false);
        checkAuditory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SwitchAuditoryFeedback(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(checkAlwaysOnTop)
                    .add(checkAuditory))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(checkAlwaysOnTop)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkAuditory)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelVersion.setText("version...");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelVersion)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(labelVersion)
                .add(18, 18, 18)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SwitchAuditoryFeedback(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SwitchAuditoryFeedback
       CamAcqJ.getInstance().setAuditoryFeedback(checkAuditory.isSelected());
    }//GEN-LAST:event_SwitchAuditoryFeedback

    private void setAlwaysOnTop(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setAlwaysOnTop
       CamAcqJ.getInstance().setAlwaysOnTop(checkAlwaysOnTop.isSelected());
    }//GEN-LAST:event_setAlwaysOnTop
   void showProperties() {
      StringBuffer sBuff = new StringBuffer();

      //    sBuff.append("System Properties:\n");
      //    Enumeration enumr = System.getProperties()
      //        .propertyNames();
      //    while (enumr.hasMoreElements()) {
      //      String key = (String) enumr.nextElement();
      //      String value = System.getProperty(key);
      //      sBuff.append(key + " = " + value + "\n");
      //    }
      //    sBuff.append("\n");
      //    long free = Runtime.getRuntime().freeMemory() / 1000;
      //    long alloc = Runtime.getRuntime().totalMemory() / 1000;
      //    long used = alloc - free;
      //    sBuff.append(" MemKB Free/Alloc/Used/Max: " +
      //        String.valueOf(free) + " / " +
      //        String.valueOf(alloc) + " / " +
      //        String.valueOf(used) + " / " +
      //        Runtime.getRuntime().maxMemory() / 1000000 + " MB maxMemory\n");
      TextWindow tf = new TextWindow("Properties & Preferences");
      tf.setSize(600, 600);
      tf.setLocation(200, 20);
      tf.setVisible(true);
      tf.set("PROPERTIES ------------------------\n");
      tf.append(PropsWassup.displayAllProperties("\n"));

      //tf.append("\nPrefs.sys:\n" + Prefs.listKeysSys());
      //tf.append("\nPrefs.usr:\n" + Prefs.listKeysUsr());

   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAlwaysOnTop;
    private javax.swing.JCheckBox checkAuditory;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelVersion;
    // End of variables declaration//GEN-END:variables
}

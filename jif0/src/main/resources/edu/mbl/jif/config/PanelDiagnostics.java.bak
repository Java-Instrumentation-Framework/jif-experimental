/*
 * PanelSys.java
 *
 * Created on June 1, 2006, 6:13 PM
 */
package edu.mbl.jif.config;

import edu.mbl.jif.camera.camacq.*;
import edu.mbl.jif.camera.TextWindow;
import edu.mbl.jif.gui.swingthread.SwingThread;
import edu.mbl.jif.script.BeanShellConsole;
import edu.mbl.jif.utils.diag.Frame_Memory_Monitor;
import edu.mbl.jif.utils.diag.MemoryMonitor;
import edu.mbl.jif.utils.diag.ThreadViewer;
import edu.mbl.jif.utils.props.PropsWassup;
import edu.mbl.jif.workframe.AbstractApplicationController;
import java.io.IOException;
import java.security.Permission;
import java.security.PermissionCollection;
import java.security.Policy;
import java.security.ProtectionDomain;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * System options and diagnostics panel
 * @author  GBH
 */
public class PanelDiagnostics extends javax.swing.JPanel {

    Preferences prefs;
    AbstractApplicationController appCtrl;

    /** Creates new form PanelSys */
    public PanelDiagnostics()
      {
        initComponents();

      }

    public PanelDiagnostics(AbstractApplicationController appCtrl)
      {
        this.appCtrl = appCtrl;
        // @todo Make this app-independent
        prefs = CamAcqJ.getInstance().getPreferences();
        initComponents();
        checkDebug.setSelected(CamAcqJ.getInstance().isDebug());
      }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        buttonProperties = new javax.swing.JButton();
        buttonPrefs = new javax.swing.JButton();
        checkDebug = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        buttonClearPrefs = new javax.swing.JButton();
        buttonPrefs1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        buttonDeviceMgr = new javax.swing.JButton();
        buttonMemory = new javax.swing.JButton();

        setBackground(new java.awt.Color(211, 194, 215));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.GridLayout(4, 3));

        buttonProperties.setText("Properties");
        buttonProperties.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listProperties(evt);
            }
        });
        jPanel2.add(buttonProperties);

        buttonPrefs.setFont(new java.awt.Font("Tahoma", 0, 10));
        buttonPrefs.setText("Preferences");
        buttonPrefs.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPrefEdit(evt);
            }
        });
        jPanel2.add(buttonPrefs);

        checkDebug.setText("debugging");
        checkDebug.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkDebug.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        checkDebug.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkDebug.setOpaque(false);
        checkDebug.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                setDebug(evt);
            }
        });
        jPanel2.add(checkDebug);

        jButton1.setText("Permissions");
        jButton1.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPermissions(evt);
            }
        });
        jPanel2.add(jButton1);

        buttonClearPrefs.setText("Reset Prefs");
        buttonClearPrefs.setToolTipText("Reset preference values to defaults");
        buttonClearPrefs.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonClearPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearPrefsActionPerformed(evt);
            }
        });
        jPanel2.add(buttonClearPrefs);

        buttonPrefs1.setText("Threads");
        buttonPrefs1.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonPrefs1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewThreads(evt);
            }
        });
        jPanel2.add(buttonPrefs1);

        jButton2.setText("BeanShell");
        jButton2.setToolTipText("Open BeanShell console");
        jButton2.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBeanShellConsole(evt);
            }
        });
        jPanel2.add(jButton2);

        buttonDeviceMgr.setText("DeviceMgr");
        buttonDeviceMgr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeviceMgrActionPerformed(evt);
            }
        });
        jPanel2.add(buttonDeviceMgr);

        buttonMemory.setFont(new java.awt.Font("Tahoma", 0, 10));
        buttonMemory.setText("MemMonitor");
        buttonMemory.setMargin(new java.awt.Insets(2, 4, 2, 4));
        buttonMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMemMonitor(evt);
            }
        });
        jPanel2.add(buttonMemory);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openBeanShellConsole(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBeanShellConsole
        new BeanShellConsole();
    }//GEN-LAST:event_openBeanShellConsole

    private void ViewThreads(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewThreads
        SwingThread.dispatchToEDT(new Runnable() {

            public void run()
              {
                JFrame f = new JFrame();
                ThreadViewer viewer = new ThreadViewer();
                f.setContentPane(viewer);
                f.setLocation(100, 100);
                f.setSize(600, 300);
                f.setVisible(true);
                f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
              // Keep the main thread from exiting by blocking
              // on wait() for a notification that never comes.
//                Object lock = new Object();
//                synchronized (lock) {
//                    try {
//                        lock.wait();
//                    } catch (InterruptedException x) {
//                    }
//                }
              }

        });
    }//GEN-LAST:event_ViewThreads

    private void setDebug(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setDebug
        CamAcqJ.getInstance().setDebug(checkDebug.isSelected());
    }//GEN-LAST:event_setDebug

    private void listPermissions(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPermissions
        // Get the protection domain for the class
        ProtectionDomain domain = CamAcqJ.getInstance().getClass().getProtectionDomain();

        // With the protection domain, get all the permissions from the Policy object
        PermissionCollection pcoll = Policy.getPolicy().getPermissions(domain);

        // View each permission in the permission collection
        Enumeration enumer = pcoll.elements();
        for (; enumer.hasMoreElements();) {
            Permission p = (Permission) enumer.nextElement();
            System.out.println(p.toString());
        }
    }//GEN-LAST:event_listPermissions

    private void listProperties(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listProperties
        showProperties();
    }//GEN-LAST:event_listProperties

    private void buttonClearPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearPrefsActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Reset Preferences?") == JOptionPane.YES_OPTION) {
            try {
                prefs.clear();
            } catch (BackingStoreException e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(null, "Restart application now.");
        }
    }//GEN-LAST:event_buttonClearPrefsActionPerformed

    private void openPrefEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPrefEdit
        try {
            new de.jppietsch.prefedit.PrefEdit().main(null);
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_openPrefEdit

    private void openMemMonitor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMemMonitor
        SwingThread.dispatchToEDT(new Runnable() {

            public void run()
              {
                //new Frame_Memory_Monitor();
                MemoryMonitor.openInJFrame();
              }

        });
    }//GEN-LAST:event_openMemMonitor

private void buttonDeviceMgrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeviceMgrActionPerformed
    try {
        String s = System.getenv("windir") + "\\system32\\mmc.exe " + System.getenv("windir") + "\\system32\\devmgmt.msc";
        System.out.println("ExecString: " + s);
        Runtime.getRuntime().exec(s);//GEN-LAST:event_buttonDeviceMgrActionPerformed
    } catch (IOException ex) {
        Logger.getLogger(PanelDiagnostics.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    void showProperties()
      {
        StringBuffer sBuff = new StringBuffer();

        //    sBuff.append("System Properties:\n");
        //    Enumeration enumr = System.getProperties()
        //        .propertyNames();
        //    while (enumr.hasMoreElements()) {
        //      String key = (String) enumr.nextElement();
        //      String value = System.getProperty(key);
        //      sBuff.append(key + " = " + value + "\n");
        //    }
        //    sBuff.append("\n");
        //    long free = Runtime.getRuntime().freeMemory() / 1000;
        //    long alloc = Runtime.getRuntime().totalMemory() / 1000;
        //    long used = alloc - free;
        //    sBuff.append(" MemKB Free/Alloc/Used/Max: " +
        //        String.valueOf(free) + " / " +
        //        String.valueOf(alloc) + " / " +
        //        String.valueOf(used) + " / " +
        //        Runtime.getRuntime().maxMemory() / 1000000 + " MB maxMemory\n");
        TextWindow tf = new TextWindow("Properties & Preferences");
        tf.setSize(600, 600);
        tf.setLocation(200, 20);
        tf.setVisible(true);
        tf.set("PROPERTIES ------------------------\n");
        tf.append(PropsWassup.displayAllProperties("\n"));

      //tf.append("\nPrefs.sys:\n" + Prefs.listKeysSys());
      //tf.append("\nPrefs.usr:\n" + Prefs.listKeysUsr());

      }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClearPrefs;
    private javax.swing.JButton buttonDeviceMgr;
    private javax.swing.JButton buttonMemory;
    private javax.swing.JButton buttonPrefs;
    private javax.swing.JButton buttonPrefs1;
    private javax.swing.JButton buttonProperties;
    private javax.swing.JCheckBox checkDebug;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
